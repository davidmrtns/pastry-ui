{"version":3,"sources":["../src/utils/CakeFactory.tsx","../src/components/CakeBoard/CakeBoard.tsx","../src/components/FormatSection/FormatSection.tsx","../src/components/FormatCard/FormatCard.tsx","../src/components/FlavorList/FlavorList.tsx","../src/components/Highlighter/Highlighter.tsx","../src/contexts/SearchContext/SearchContext.tsx","../src/components/Marquee/Marquee.tsx","../src/components/ReferenceTable/ReferenceTable.tsx","../src/types/Currency.ts"],"sourcesContent":["import { Box, Divider, SpeedDial } from '@mui/material';\r\nimport { CakeBoardData } from \"../types/CakeBoardData\";\r\nimport { CakeBoard } from '../components/CakeBoard/CakeBoard';\r\nimport { SearchProvider } from '../contexts/SearchContext/SearchContext';\r\nimport { Marquee } from '../components/Marquee/Marquee';\r\nimport { ReactElement } from 'react';\r\nimport { ReferenceTable } from '../components/ReferenceTable/ReferenceTable';\r\nimport { Reference } from '../types/Reference';\r\n\r\ntype CakeFactoryProps = {\r\n  name: string,\r\n  logoUrl: string,\r\n  showSearchBar: boolean,\r\n  searchBarPlaceholder?: string,\r\n  children: ReactElement<typeof SpeedDial>,\r\n  cakeBoards: CakeBoardData[],\r\n  reference?: Reference;\r\n};\r\n\r\nfunction CakeFactoryContent({ name, logoUrl, showSearchBar, searchBarPlaceholder, children, cakeBoards, reference }: CakeFactoryProps) {\r\n  return (\r\n    <Box>\r\n      <Marquee \r\n        name={name}\r\n        logoUrl={logoUrl}\r\n        showSearchBar={showSearchBar}\r\n        searchBarPlaceholder={searchBarPlaceholder}\r\n      />\r\n      {cakeBoards.map((board, index) => (\r\n        <Box key={index}>\r\n          <CakeBoard boardData={board} />\r\n          {index < cakeBoards.length - 1 && <Divider variant=\"middle\" />}\r\n        </Box>\r\n      ))}\r\n      {children}\r\n      {reference && <ReferenceTable reference={reference} />}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport function CakeFactory(props: CakeFactoryProps) {\r\n  return(\r\n    <SearchProvider>\r\n      <CakeFactoryContent {...props} />\r\n    </SearchProvider>\r\n  );\r\n}","import { Typography, Box } from '@mui/material';\r\nimport { FormatSection } from '../FormatSection/FormatSection';\r\nimport { FormatCard } from '../FormatCard/FormatCard';\r\nimport { FlavorList } from '../FlavorList/FlavorList';\r\nimport { CakeBoardData } from '@/src/types/CakeBoardData';\r\n\r\ntype CakeBoardProps = {\r\n  boardData: CakeBoardData;\r\n};\r\n\r\nexport const CakeBoard = ({ boardData }: CakeBoardProps) => {\r\n  return (\r\n    <Box \r\n      sx={{ \r\n        minWidth: 200,\r\n        backgroundColor: 'transparent',\r\n        padding: 1\r\n      }}\r\n    >\r\n      {boardData.name && \r\n        <Typography variant=\"h6\" \r\n          sx={{ \r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            fontStyle: 'italic',\r\n            fontSize: {\r\n              xs: '1.1rem',\r\n              sm: '1.2rem',\r\n              md: 30\r\n            },\r\n          }}\r\n        >\r\n          {boardData.name}\r\n        </Typography>\r\n      }\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          flexDirection: 'column',\r\n          marginBottom: 1.5,\r\n          gap: 2,\r\n          paddingTop: {\r\n            xs: 1,\r\n            sm: 2,\r\n            md: 2\r\n          }\r\n        }}\r\n      >\r\n        {boardData.roundFormats && \r\n          <FormatSection name=\"Formato redondo\">\r\n            {boardData.roundFormats.map((cake, index) => (\r\n              <FormatCard key={`rd${index}`} size={cake.size} price={cake.price} borderType='round' />\r\n            ))}\r\n          </FormatSection>\r\n        }\r\n        {boardData.squareFormats && \r\n          <FormatSection name=\"Formato retangular\">\r\n            {boardData.squareFormats.map((cake, index) => (\r\n              <FormatCard key={`sq${index}`} size={cake.size} price={cake.price} borderType='square' />\r\n            ))}\r\n          </FormatSection>\r\n        }\r\n      </Box>\r\n      {boardData.flavors && \r\n        <FlavorList flavors={boardData.flavors} />\r\n      }\r\n    </Box>\r\n  );\r\n};\r\n","import { Typography, Box } from '@mui/material';\r\n\r\ntype FormatSectionProps = {\r\n  name: string;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport const FormatSection = ({ name, children }: FormatSectionProps) => {\r\n  return (\r\n    <Box \r\n      sx={{ \r\n        display: 'flex',\r\n        gap: {\r\n          xs: '4px',\r\n          sm: '16px',\r\n          md: 2\r\n        },\r\n        alignItems: 'center',\r\n        justifyContent: {\r\n          xs: 'space-between',\r\n          sm: 'space-between',\r\n          md: 'center'\r\n        },\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{ \r\n          width: {\r\n            xs: '15%',\r\n            sm: '30%',\r\n            md: '15%'\r\n          }\r\n        }}\r\n      >\r\n        <Typography variant='h5'\r\n          sx={{ \r\n            fontSize: {\r\n              xs: '0.6rem',\r\n              sm: '1.2rem',\r\n              md: '1.4rem'\r\n            },\r\n            fontWeight: \"bold\" \r\n          }}\r\n        >\r\n          {name}\r\n        </Typography>\r\n      </Box>\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n","import { Price } from '@/src/types/Price';\r\nimport { Typography, Card, CardContent } from '@mui/material';\r\n\r\ntype FormatCardProps = {\r\n  size: string;\r\n  price: Price;\r\n  borderType?: 'round' | 'square';\r\n};\r\n\r\nexport const FormatCard = ({ size, price, borderType = 'square' }: FormatCardProps) => {\r\n  return (\r\n    <Card \r\n      sx={(theme) => ({ \r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.text.secondary,\r\n        border: 1,\r\n        borderColor: '#000000',\r\n        borderRadius: borderType === 'round' ? '50px' : 0,\r\n        width: {\r\n          xs: '20%',\r\n          sm: '30%',\r\n          md: '15%'\r\n        },\r\n        textAlign: 'center'\r\n      })}\r\n    >\r\n      <CardContent\r\n        sx={{ \r\n          '&:last-child': {\r\n            paddingBottom: {\r\n              xs: '6px',\r\n              sm: '16px',\r\n              md: '16px'\r\n            },\r\n          },\r\n          padding: {\r\n            xs: '6px',\r\n            sm: '16px',\r\n            md: '16px'\r\n          }\r\n        }}\r\n      >\r\n        <Typography variant='h5' \r\n          sx={{ \r\n            fontWeight: 'bold',\r\n            fontStyle: 'italic',\r\n            fontSize: {\r\n              xs: '0.85rem',\r\n              sm: '1.2rem',\r\n              md: '1.6rem'\r\n            }\r\n          }}\r\n        >\r\n          {size}\r\n        </Typography>\r\n        <Typography variant='h5'\r\n          sx={{ \r\n            fontSize: {\r\n              xs: '0.8rem',\r\n              sm: '1.2rem',\r\n              md: '1.6rem'\r\n            }\r\n          }}\r\n        >\r\n          {price.currency} {price.value}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Box, List, ListItem, ListItemIcon, ListItemText } from '@mui/material';\r\nimport FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';\r\nimport { Highlighter } from '../Highlighter/Highlighter';\r\nimport { useSearch } from '../../contexts/SearchContext/SearchContext';\r\n\r\ntype FlavorListProps = {\r\n  flavors: string[];\r\n};\r\n\r\nconst MAX_COLUMNS = 2;\r\n\r\nexport const FlavorList = ({ flavors }: FlavorListProps) => {\r\n  const { query, setQuery } = useSearch();\r\n  const itemsPerColumn = Math.ceil(flavors.length / MAX_COLUMNS);\r\n\r\n  const columns = Array.from({ length: MAX_COLUMNS }, (_, i) =>\r\n    flavors.slice(i * itemsPerColumn, (i + 1) * itemsPerColumn)\r\n  ).filter((col) => col.length > 0);\r\n\r\n  return (\r\n    <Box \r\n      sx={{ \r\n        display: 'flex',\r\n        gap: {\r\n          xs: 2,\r\n          sm: '16px',\r\n          md: 10\r\n        },\r\n        justifyContent: {\r\n          xs: 'space-between',\r\n          sm: 'space-between',\r\n          md: 'center'\r\n        },\r\n        padding: \"15px\"\r\n      }}\r\n    >\r\n      {columns.map((col, colIndex) => (\r\n        <List key={colIndex} dense disablePadding>\r\n          {col.map((flavor, i) => (\r\n            <ListItem key={i} disableGutters sx={{ py: 0 }}>\r\n              <ListItemIcon sx={{ minWidth: 20 }}>\r\n                <FiberManualRecordIcon sx={{ fontSize: 6 }} />\r\n              </ListItemIcon>\r\n              <ListItemText \r\n                primary={<Highlighter text={flavor} query={query} />}\r\n                slotProps={{\r\n                  primary: {\r\n                    fontSize: {\r\n                      xs: '0.6rem',\r\n                      sm: '1.2rem',\r\n                      md: '1em'\r\n                    }\r\n                  }\r\n                }}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n","type HighlighterProps = {\r\n  text: string;\r\n  query: string;\r\n};\r\n\r\nexport const Highlighter = ({ text, query }: HighlighterProps) => {\r\n  if (!query) return <>{text}</>;\r\n\r\n  const parts = text.split(new RegExp(`(${query})`, 'gi'));\r\n\r\n  return (\r\n    <>\r\n      {parts.map((part, i) =>\r\n        part.toLowerCase().startsWith(query.toLowerCase()) ? (\r\n          <mark key={i} style={{ backgroundColor: '#fff176', fontWeight: 'bold' }}>\r\n            {part}\r\n          </mark>\r\n        ) : (\r\n          part\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ntype SearchContextType = {\r\n  query: string;\r\n  setQuery: (value: string) => void;\r\n};\r\n\r\nconst SearchContext = createContext<SearchContextType | undefined>(undefined);\r\n\r\nexport const SearchProvider = ({ children }: { children: ReactNode }) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  return (\r\n    <SearchContext.Provider value={{ query, setQuery }}>\r\n      {children}\r\n    </SearchContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSearch = () => {\r\n  const context = useContext(SearchContext);\r\n  if (!context) throw new Error('useSearch must be used within a SearchProvider');\r\n  return context;\r\n};\r\n","import { useSearch } from '../../contexts/SearchContext/SearchContext';\r\nimport { AppBar, Avatar, Box, InputAdornment, TextField, Toolbar, Typography } from \"@mui/material\";\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport CakeIcon from '@mui/icons-material/Cake';\r\n\r\ntype MarqueeProps = {\r\n  name: string,\r\n  logoUrl?: string,\r\n  showSearchBar?: boolean;\r\n  searchBarPlaceholder?: string;\r\n};\r\n\r\nexport const Marquee = ({ name, logoUrl, showSearchBar, searchBarPlaceholder }: MarqueeProps) => {\r\n  const { query, setQuery } = useSearch();\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  return(\r\n    <Box>\r\n      <AppBar position=\"fixed\" color=\"primary\" elevation={1}>\r\n        <Toolbar sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Box\r\n            onClick={scrollToTop}\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 1,\r\n              cursor: 'pointer',\r\n            }}\r\n          >\r\n            <Avatar \r\n              src={logoUrl}\r\n              sx={(theme) => ({ \r\n                bgcolor: !logoUrl ? theme.palette.secondary.main : 'transparent',\r\n                width: {\r\n                  xs: '3.3rem',\r\n                  sm: '3.5rem',\r\n                  md: '3.7rem'\r\n                },\r\n                height: {\r\n                  xs: '3.3rem',\r\n                  sm: '3.5rem',\r\n                  md: '3.7rem'\r\n                }\r\n              })}\r\n            >\r\n              <CakeIcon sx={(theme) => ({ color: theme.palette.text.secondary })} />\r\n            </Avatar>\r\n            <Typography variant=\"h4\"\r\n              sx={{\r\n                textAlign: 'left',\r\n                fontWeight: 'bold',\r\n                fontStyle: 'italic',\r\n                fontSize: {\r\n                  xs: '1.3rem',\r\n                  sm: '1.4rem',\r\n                  md: 35\r\n                }\r\n              }}\r\n            >\r\n              {name}\r\n            </Typography>\r\n          </Box>\r\n          {showSearchBar && (\r\n            <TextField\r\n              placeholder={searchBarPlaceholder || \"Search...\"}\r\n              size=\"small\"\r\n              onChange={e => setQuery(e.target.value)}\r\n              sx={{\r\n                backgroundColor: '#ffffff',\r\n                borderRadius: 20,\r\n                ml: 'auto',\r\n                width: {\r\n                  xs: '40%',\r\n                  sm: '250px'\r\n                },\r\n                '& .MuiOutlinedInput-root': {\r\n                  '& fieldset': {\r\n                    border: 'none',\r\n                  }\r\n                }\r\n              }}\r\n              slotProps={{\r\n                input: {\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon sx={{\r\n                        width: {\r\n                            xs: '1.1rem',\r\n                            sm: '1.2rem',\r\n                            md: '1.8rem'\r\n                          }\r\n                        }}\r\n                      />\r\n                    </InputAdornment>\r\n                  ),\r\n                  sx: {\r\n                    fontSize: {\r\n                      xs: '0.7rem',\r\n                      sm: '0.8rem',\r\n                      md: '1rem'\r\n                    }\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Toolbar />\r\n    </Box>\r\n  );\r\n}","import { Reference } from \"@/src/types/Reference\";\r\nimport { ReferenceHeader } from \"@/src/types/ReferenceHeader\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Box } from \"@mui/material\";\r\n\r\ntype ReferenceTableProps = {\r\n  reference: Reference;\r\n};\r\n\r\nexport const ReferenceTable = ({ reference }: ReferenceTableProps) => {\r\n  const { name, headers, values, disclaimer } = reference;\r\n  \r\n  const resolveHeaderName = (header: ReferenceHeader) => {\r\n    if(header.footnoteWeight && header.footnoteWeight > 0){\r\n      return header.name + \"*\".repeat(header.footnoteWeight);\r\n    }else{\r\n      return header.name;\r\n    }\r\n  }\r\n\r\n  const resolveFootnote = (header: ReferenceHeader) => {\r\n    if(header.footnoteWeight && header.footnoteWeight > 0){\r\n      return \"*\".repeat(header.footnoteWeight) + header.footnote;\r\n    }\r\n  }\r\n  \r\n  return(\r\n    <TableContainer\r\n      sx={{ \r\n        paddingX: {\r\n          xs: 3,\r\n          sm: 2,\r\n          md: 5\r\n        },\r\n        paddingTop: {\r\n          xs: 2,\r\n          sm: 3,\r\n          md: 4\r\n        },\r\n        paddingBottom: {\r\n          xs: 7,\r\n          sm: 5,\r\n          md: 5\r\n        },\r\n      }}\r\n    >\r\n      {name && (\r\n        <Typography variant=\"h6\" \r\n          sx={{ \r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            fontStyle: 'italic',\r\n            fontSize: {\r\n              xs: '1.3rem',\r\n              sm: '1.5rem',\r\n              md: 35\r\n            },\r\n            paddingBottom: 0.7\r\n          }}\r\n        >\r\n          {name}\r\n        </Typography>\r\n      )}\r\n      <Table sx={{ border: 1 }}>\r\n        <TableHead \r\n          sx={(theme) => ({\r\n            backgroundColor: theme.palette.secondary.main,\r\n          })}\r\n        >\r\n          <TableRow>\r\n            {headers.map((header, index) => (\r\n              <TableCell\r\n                key={index}\r\n                sx={(theme) => ({\r\n                  fontWeight: 'bold',\r\n                  textAlign: 'center',\r\n                  color: theme.palette.text.secondary,\r\n                  borderBottom: \"unset\"\r\n                })}\r\n              >\r\n                {resolveHeaderName(header)}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {values.map((row, rowIndex) => (\r\n            <TableRow key={rowIndex}\r\n              sx={{\r\n                backgroundColor: rowIndex % 2 === 0 ? '#ffffff35' : 'transparent',\r\n              }}\r\n            >\r\n              {row.map((cell, cellIndex) => (\r\n                <TableCell key={cellIndex} sx={{ textAlign: 'center', borderBottom: \"unset\" }}>\r\n                  {cell}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      {headers.some(header => header.footnote) && (\r\n        <Typography variant=\"caption\" \r\n          sx={{ \r\n            textAlign: 'center',\r\n            fontStyle: 'italic',\r\n            paddingTop: 1,\r\n            fontSize: {\r\n              xs: '0.7rem',\r\n              sm: '0.9rem',\r\n              md: '1rem'\r\n            }\r\n          }}\r\n        >\r\n          {headers.filter(header => header.footnote).map((header, index) => (\r\n            <span key={index}>\r\n              {resolveFootnote(header)}\r\n              {index < headers.filter(header => header.footnote).length - 1 ? \" | \" : \"\"}\r\n            </span>\r\n          ))}\r\n        </Typography>\r\n      )}\r\n      {disclaimer && (\r\n        <Box>\r\n          <Typography variant=\"caption\" \r\n            sx={{ \r\n              textAlign: 'left',\r\n              fontStyle: 'italic',\r\n              fontWeight: 'bold',\r\n              textDecoration: 'underline',\r\n              fontSize: {\r\n                xs: '1rem',\r\n                sm: '1.1rem',\r\n                md: \"1.3rem\"\r\n              }\r\n            }}\r\n          >\r\n            {disclaimer}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </TableContainer>\r\n  );\r\n}\r\n","export enum Currency {\r\n  BRL = 'R$',\r\n  USD = '$',\r\n  EUR = '€',\r\n  GBP = '£',\r\n  JPY = '¥',\r\n}"],"mappings":"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","names":["Box","Typography","Box","Typography","jsx","jsxs","Box","jsx","jsx","jsx","jsxs","Box","jsx","jsxs","Box","Typography","Box","Typography","jsx","jsxs","Typography","Box","jsx","jsxs","header","jsx","jsxs","Box","Currency"]}